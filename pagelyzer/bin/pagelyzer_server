#! /usr/bin/ruby1.9.1
#-*- mode: ruby; encoding: utf-8 -*-
# Andrés Sanoja
# UPMC - LIP6
#
#
#
# pagelyzer 
#
# Requires: Ruby 1.9.1+ (1.8.x versions won't work), rubygems 1.3.7+ and Hpricot gem v=0.8.6
#
# Copyright (C) 2011, 2012 Andrés Sanoja, Université Pierre et Marie Curie -
# Laboratoire d'informatique de Paris 6 (LIP6)
#
# Contributors: Stephane Gançarski - LIP6
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

require "sinatra"
require_relative "../lib/pagelyzer_capture.rb"

port = 8082
set :port, port
set :bind, '0.0.0.0'
set :enviroment, :production
set :server, 'thin'

puts "Starting server in port #{port}"
app_path = "/home/scape/src/pagelyzer/standalone/gitversion/pagelyzer-ruby-0.9.1-standalone"
data_path = "/media/DATA/online"

get '/capture' do
	url = params['url']
	browser = params['browser']
	granularity = params['granularity']
	if granularity.nil? or granularity.empty?
		granularity = 4
	end
	
	if url.empty?
		return "NO URL GIVEN"
	else
		filename = Capture.parse_filename(url)
		cmd=[]
		cmd.push "#{app_path}/pagelyzer capture --url=#{url} --output-folder=#{data_path}  --headless --browser=#{browser}";
		cmd.push "#{app_path}/pagelyzer analyzer --decorated-file=#{data_path}/#{browser}_#{filename}.dhtml --output-file=#{data_path}/#{browser}_#{filename}.xml --granularity=#{granularity} --force";
		cmd.push "#{app_path}/pagelyzer view --vixml-file=#{data_path}/#{browser}_#{filename}.xml --output-file=#{data_path}/#{browser}_#{filename}.svg" # --snapshot-file=#{data_path}/#{browser}_#{filename}.png";
		cmd.push "convert #{data_path}/#{browser}_#{filename}.svg  #{data_path}/#{browser}_#{filename}.2.png";
		
		cmd.each {|x| 
			puts x
			break unless system(x)
		}
		
		content_type 'image/png'
		return File.open("#{data_path}/#{browser}_#{filename}.2.png",'rb').read
	end
	
end

get '/xml' do
	url = params['url']
	browser = params['browser']
	filename = Capture.parse_filename(url)
	content_type 'text/xml'
	return File.open("#{data_path}/#{browser}_#{filename}.xml",'r').read
end
